@startuml Class Diagram

' ===========================
' ПАКЕТ: types (Domain Data)
' ===========================
package "types" {
  enum TileType {
    WALL
    RIVER
    MOUNTAIN
    FOREST
    FIELD
    BEACH
    EXIT_UP
    EXIT_DOWN
    EXIT_RIGHT
    EXIT_LEFT
    NO_WAY
  }
  
  interface Position {
    +x: number
    +y: number
  }
  
  interface GameStats {
    +health: number
    +maxHealth: number
    +attack: number
    +defense: number
    +experience: number
    +level: number
    +experienceToNextLevel: number
  }
  
  enum EntityType {
    PLAYER
    ENEMY
    ITEM
  }
  
  enum EnemyCategory {
    MELEE
    RANGED
    ELITE
    REPLICATING
  }
  
  interface BaseEntity {
    +id: string
    +type: EntityType
    +position: Position
    +stats: GameStats
    +symbol: string
    +name: string
    +category?: EnemyCategory
    +confused?: boolean
    +confusionTurns?: number
    +canReplicate?: boolean
    +replicationChance?: number
    +replicationCount?: number
  }

  interface EnemyEntity {
    +type: EntityType.ENEMY
    +category?: EnemyCategory
    +experience: number
  }

  interface OtherEntity {
    +type: Exclude<EntityType, EntityType.ENEMY>
  }
  
  interface Tile {
    +type: TileType
    +position: Position
    +entity: Entity | null
  }

  interface GameField {
    +width: number
    +height: number
    +position: Position
    +tiles: Tile[][]
  }
  
  interface GameMap {
    +width: number
    +height: number
    +fields: GameField[][]
  }
  
  enum GameTheme {
    FANTASY
    FOREST
  }
  
  interface GameState {
    +map: GameMap
    +currentField: GameField
    +player: Entity
    +enemies: Entity[]
    +gameOver: boolean
    +victory: boolean
    +turn: number
    +theme: GameTheme
    +replicatingEntities: string[]
    +confusionCooldown: number
  }
}

' Отношения внутри types
TileType -- Tile
Position -- BaseEntity
Position -- Tile
Position -- GameField
GameStats -- BaseEntity
EntityType -- EnemyEntity
EntityType -- OtherEntity
EnemyCategory -- EnemyEntity

BaseEntity <|-- EnemyEntity
BaseEntity <|-- OtherEntity

GameField *-- Tile
GameMap *-- GameField
GameState *-- GameMap
GameTheme -- GameState

GameState *-- EnemyEntity : contains enemies
GameState *-- OtherEntity : contains player 
Tile o-- BaseEntity : contains entity


' ===========================
' ПАКЕТ: services (Game Logic)
' ===========================
package "services" {
  class EntityManager {
    -entityFactory: EntityFactory
    +constructor(theme: GameTheme)
    +getEntityFactory(): EntityFactory
    +createPlayer(position: Position): Entity
    +spawnEnemiesOfType(field: GameField, category: EnemyCategory, count: number): Entity[]
    +findRandomEmptyPosition(field: GameField): Position | null
    +getBehaviorForEnemy(): BehaviorStrategy
  }

  class MapService {
    -map: GameMap
    -currentField: GameField
    +constructor(builder: MapBuilder)
    +getMap(): GameMap
    +getCurrentField(): GameField
    +isValidMoveOnField(x: number, y: number): boolean
    +isExitTile(x: number, y: number): boolean
    +moveToAdjacentField(direction: string): void
    +clearEntitiesOnCurrentField(): void
  }

  class GameEngine {
    -mapService: MapService
    -entityManager: EntityManager
    -state: GameState
    -enemyBehaviors: Map<string, BehaviorStrategy>
    -enemyStates: Map<string, EnemyState>
    -originalBehaviors: Map<string, BehaviorStrategy>
    -replicatingEntities: Map<string, ReplicatingEntity>
    -lastPlayerContactPositions: Map<string, Position>
    -maxConfusionCooldown: number
    +constructor(theme?: GameTheme)
    +getState(): GameState
    +movePlayer(direction: string): void
    +performAttack(attacker: Entity, defender: Entity): void
    +useConfusionAbility(): void
    +processTurn(): void
    -spawnEnemies(field: GameField): Entity[]
    -confuseEnemy(enemy: Entity, duration: number): void
    -processEnemyTurns(): void
    -combat(attacker: Entity, defender: Entity): void
    -updateEnemyStates(): void
    -regenerateEnemiesHealth()
    -levelUpPlayer(): void
  }
}

' Связи внутри services
EntityManager *-- patterns.factory.EntityFactory

GameEngine *-- MapService
GameEngine *-- EntityManager
GameEngine o-- types.GameState
GameEngine o-- patterns.strategy.BehaviorStrategy
GameEngine o-- patterns.state.EnemyState
GameEngine o-- patterns.prototype.ReplicatingEntity
GameEngine o-- types.Position


' ===========================
' ПАКЕТ: patterns (Design Patterns)
' ===========================
package "patterns" {

  ' --- Strategy Pattern ---
  package "strategy" {
    abstract class BehaviorStrategy {
      +execute(entity: Entity, player: Entity, gameField: GameField): Position
      +static isValidMove(x: number, y: number, gameField: GameField): boolean
    }
    
    class AggressiveBehavior {
      +execute(entity: Entity, player: Entity, gameField: GameField): Position
    }
    
    class PassiveBehavior {
      +execute(entity: Entity, player: Entity, gameField: GameField): Position
    }
    
    class FearfulBehavior {
      +execute(entity: Entity, player: Entity, gameField: GameField): Position
    }

    BehaviorStrategy <|-- AggressiveBehavior
    BehaviorStrategy <|-- PassiveBehavior
    BehaviorStrategy <|-- FearfulBehavior
  }
  
  ' --- Decorator Pattern ---
  package "decorator" {
    abstract class BehaviorDecorator {
      #wrappedBehavior: BehaviorStrategy
      +constructor(behavior: BehaviorStrategy)
      +execute(entity: Entity, player: Entity, gameField: GameField): Position
    }
    
    class ConfusedBehavior {
      -turnsRemaining: number
      +constructor(behavior: BehaviorStrategy, duration: number)
      +execute(entity: Entity, player: Entity, gameField: GameField): Position
      +isConfused(): boolean
      +getTurnsRemaining(): number
      -getRandomAdjacentPositions(position: Position)
    }

    BehaviorDecorator <|-- ConfusedBehavior
    patterns.strategy.BehaviorStrategy <|-- BehaviorDecorator
  }
  
  ' --- Builder Pattern ---
  package "builder" {
    class MapLoader {
      +loadMapFromFile(filepath: string): GameMap
    }

    class MapBuilder {
      -fieldWidth: number
      -fieldHeight: number
      -width: number
      -height: number
      ' -wallDensity: number
      -mapFile: string | null
      -entityFactory: EntityFactory | null
      ' -roomCount: number
      ' -corridorDensity: number
      -randomSeed: number | null
      -mapLoader: MapLoader
      +constructor()
      +setFieldWidth(width: number): MapBuilder
      +setFieldHeight(height: number): MapBuilder
      +setWidth(width: number): MapBuilder
      +setHeight(height: number): MapBuilder
      +setMapFile(filepath: string): MapBuilder
      +setEntityFactory(factory: factory.EntityFactory): MapBuilder
      +setRandomSeed(seed: number): MapBuilder
      +build(): GameMap
      -generateMap(): GameMap
      -generateTiles(fieldX: number, fieldY: number, perlin, biomeNoise): Tile[][]
    }

    MapBuilder *-- MapLoader
    MapBuilder o-- patterns.factory.EntityFactory
  }
  
  ' --- Abstract Factory Pattern ---
  package "factory" {
    interface EntityFactory {
      +createMelee(position: Position, level?: number): Entity
      +createRanged(position: Position, level?: number): Entity
      +createElite(position: Position, level?: number): Entity
      +createReplicating(position: Position, level?: number): Entity
    }
    
    class FantasyEntityFactory {
      +createMelee(position: Position, level?: number): Entity
      +createRanged(position: Position, level?: number): Entity
      +createElite(position: Position, level?: number): Entity
      +createReplicating(position: Position, level?: number): Entity
    }
    
    class ForestEntityFactory {
      +createMelee(position: Position, level?: number): Entity
      +createRanged(position: Position, level?: number): Entity
      +createElite(position: Position, level?: number): Entity
      +createReplicating(position: Position, level?: number): Entity
    }

    EntityFactory <|.. FantasyEntityFactory
    EntityFactory <|.. ForestEntityFactory
  }
  
  ' --- Prototype Pattern ---
  package "prototype" {
    interface EntityPrototype {
      +clone(): Entity
      +tryReplicate(gameField: GameField): Entity | null
    }
    
    class ReplicatingEntity {
      -entity: Entity
      -replicationChance: number
      -replicationCount: number
      +constructor(entity: Entity, replicationChance?: number, replicationCount?: number)
      +clone(): Entity
      +tryReplicate(gameField: GameField): Entity | null
      -getAdjacentPositions(position: Position): Position[]
      -isValidPosition(position: Position, gameField: GameField): boolean
      +getEntity(): Entity
      +getReplicationChance(): number
      +getReplicationCount(): number
      +setReplicationChance(chance: number): void
    }

    EntityPrototype <|.. ReplicatingEntity
  }
  
  ' --- Command Pattern ---
  package "command" {
    interface Command {
      +execute(): void
    }
    
    class MoveCommand {
      -gameEngine: GameEngine
      -direction: string
      +constructor(gameEngine: GameEngine, direction: string)
      +execute(): void
    }
    
    class AttackCommand {
      -gameEngine: GameEngine
      -attacker: Entity
      -target: Entity
      +constructor(gameEngine: GameEngine, attacker: Entity, target: Entity)
      +execute(): void
    }
    
    class ConfuseCommand {
      -gameEngine: GameEngine
      -targetPosition: Position
      -duration: number
      +constructor(gameEngine: GameEngine, targetPosition: Position, duration?: number)
      +execute(): void
    }
    
    class WaitCommand {
      -gameEngine: GameEngine
      +constructor(gameEngine: GameEngine)
      +execute(): void
    }
    
    class CommandInvoker {
      -commands: Command[]
      +addCommand(command: Command): void
      +executeCommands(): void
    }

    Command <|.. MoveCommand
    Command <|.. AttackCommand
    Command <|.. ConfuseCommand
    Command <|.. WaitCommand
    CommandInvoker --> Command
  }
  
  ' --- State Pattern ---
  package "state" {
    interface EnemyState {
      +getNextPosition(entity: Entity, player: Entity, gameField: GameField, originalStrategy: BehaviorStrategy): Position
      +shouldTransition(entity: Entity): EnemyState | null
      +getName(): string
    }
    
    class NormalState {
      -panicHealthThreshold: number
      +constructor(panicHealthThreshold?: number)
      +getNextPosition(entity: Entity, player: Entity, gameField: GameField, originalStrategy: BehaviorStrategy): Position
      +shouldTransition(entity: Entity): EnemyState | null
      +getName(): string
    }
    
    class PanicState {
      -fearfulStrategy: FearfulBehavior
      -recoveryThreshold: number
      +constructor(recoveryThreshold?: number)
      +getNextPosition(entity: Entity, player: Entity, gameField: GameField, originalStrategy: BehaviorStrategy): Position
      +shouldTransition(entity: Entity): EnemyState | null
      +getName(): string
    }
    
    class TrackingState {
      -targetPosition: Position
      -giveUpDistance: number
      -aggressiveStrategy: BehaviorStrategy
      +constructor(targetPosition: Position, giveUpDistance?: number)
      +getNextPosition(entity: Entity, player: Entity, gameField: GameField, originalStrategy: BehaviorStrategy): Position
      +shouldTransition(entity: Entity): EnemyState | null
      +getName(): string
    }
    
    class PatrolState {
      -centerPosition: Position
      -patrolRadius: number
      -patrolPoints: Position[]
      -validPatrolPoints: Position[]
      -currentPointIndex: number
      -stepsAtCurrentPoint: number
      -maxStepsAtPoint: number
      -patrolDuration: number
      -currentPatrolTime: number
      -lastKnownHealth: number
      +constructor(centerPosition: Position, patrolRadius?: number)
      +getNextPosition(entity: Entity, _: Entity, gameField: GameField, originalStrategy: BehaviorStrategy): Position
      +shouldTransition(entity: Entity): EnemyState | null
      +getName(): string
      -generatePatrolPoints(gameField: GameField): void
      -isValidMove(x: number, y: number, gameField: GameField): boolean
    }

    EnemyState <|.. NormalState
    EnemyState <|.. PanicState
    EnemyState <|.. TrackingState
    EnemyState <|.. PatrolState
  }
}

' ===========================
' ПАКЕТ: components (UI)
' ===========================
package "components" {
  class GameBoard {
    +gameState: GameState
    +render(): JSX.Element
  }
  
  class StatusPanel {
    +gameState: GameState
    +render(): JSX.Element
  }
  
  class App {
    -gameEngine: GameEngine
    -gameState: GameState
    -isGameRunning: boolean
    -commandInvoker: CommandInvoker
    +handleKeyDown(event: KeyboardEvent): void
    +startNewGame(): void
    +switchTheme(): void
    +render(): JSX.Element
  }

  GameBoard --> types.GameState
  StatusPanel --> types.GameState
}

App *-- components.GameBoard
App *-- components.StatusPanel
App *-- services.GameEngine
App *-- patterns.command.CommandInvoker

@enduml
