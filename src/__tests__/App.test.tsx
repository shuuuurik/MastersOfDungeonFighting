import { render, fireEvent, screen, act } from '@testing-library/react';
import '@testing-library/jest-dom';
import App from '../App';
import { GameEngine } from '../services/GameEngine';
import { GameState, GameTheme, EntityType } from '../types/game';
import { CommandInvoker, MoveCommand, WaitCommand } from '../patterns/command/Command';

// –º–æ–∫–æ–≤—ã–π GameEngine, —Ç–∞–∫ –∫–∞–∫ App –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –Ω–∏–º
jest.mock('../services/GameEngine');
// –º–æ–∫–æ–≤—ã–π CommandInvoker
jest.mock('../patterns/command/Command', () => ({
  ...jest.requireActual('../patterns/command/Command'), // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
  CommandInvoker: jest.fn(() => ({ // –º–æ–∫ CommandInvoker
    addCommand: jest.fn(),
    executeCommands: jest.fn(),
  })),
}));

// —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ GameEngine, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ
const mockGameEngineInstance = {
  getState: jest.fn(),
  movePlayer: jest.fn(),
  processTurn: jest.fn(),
};

// –∑–∞–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–æ–∫–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const mockInitialGameState: GameState = {
  player: {
    id: 'player',
      name: 'Player',
      type: EntityType.PLAYER,
      position: { x: 0, y: 0 },
      stats: { health: 100, maxHealth: 100, attack: 10, defense: 5, experience: 0, level: 1, experienceToNextLevel: 100 },
      symbol: 'ü§°',
  },
  enemies: [],
  currentField: {
			width: 30,
			height: 30,
			position: { x: 0, y: 0 },
			tiles: [],
	},
	map: {
		width: 11,
		height: 11,
		fields: [], // –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å currentField
	},
  turn: 1,
  gameOver: false,
  victory: false,
  theme: GameTheme.FANTASY,
	replicatingEntities: [],
  confusionCooldown: 0
};

describe('App', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    // –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ GameEngine –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    (GameEngine as jest.Mock).mockImplementation(() => mockGameEngineInstance);
    mockGameEngineInstance.getState.mockReturnValue(mockInitialGameState);
  });

  it('should render GameBoard and StatusPanel', () => {
    render(<App />);
    // –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ (–∏—Ö –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    expect(screen.getByText('Turn: 1')).toBeInTheDocument(); // –∏–∑ StatusPanel
    expect(screen.getByRole('grid')).toBeInTheDocument(); // –∏–∑ GameBoard
  });

  it('should create a new GameEngine on mount with default theme', () => {
    render(<App />);
    expect(GameEngine).toHaveBeenCalledTimes(1);
    expect(GameEngine).toHaveBeenCalledWith(GameTheme.FANTASY);
  });

  it('should add MoveCommand on "w" key press', () => {
    render(<App />);
		const mockCommandInvoker = (CommandInvoker as jest.Mock).mock.results[0].value;
    act(() => { // –∏—Å–ø–æ–ª—å–∑—É–µ–º act, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ keyboard –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      fireEvent.keyDown(window, { key: 'w' });
    });
    expect(mockCommandInvoker.addCommand).toHaveBeenCalledTimes(1);
    expect(mockCommandInvoker.addCommand.mock.calls[0][0]).toBeInstanceOf(MoveCommand);
    expect(mockCommandInvoker.executeCommands).toHaveBeenCalledTimes(1);
  });

  it('should add MoveCommand on ArrowUp key press', () => {
    render(<App />);
		const mockCommandInvoker = (CommandInvoker as jest.Mock).mock.results[0].value;
    act(() => {
      fireEvent.keyDown(window, { key: 'ArrowUp' });
    });
    expect(mockCommandInvoker.addCommand).toHaveBeenCalledTimes(1);
    expect(mockCommandInvoker.addCommand.mock.calls[0][0]).toBeInstanceOf(MoveCommand);
    expect(mockCommandInvoker.executeCommands).toHaveBeenCalledTimes(1);
  });

  it('should add WaitCommand on Space key press', () => {
    render(<App />);
		const mockCommandInvoker = (CommandInvoker as jest.Mock).mock.results[0].value;
    act(() => {
      fireEvent.keyDown(window, { key: ' ' }); // Spacebar
    });
    expect(mockCommandInvoker.addCommand).toHaveBeenCalledTimes(1);
    expect(mockCommandInvoker.addCommand.mock.calls[0][0]).toBeInstanceOf(WaitCommand);
    expect(mockCommandInvoker.executeCommands).toHaveBeenCalledTimes(1);
  });

  it('should update game state after a command is executed', () => {
    // –º–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –ø–æ—Å–ª–µ —Ö–æ–¥–∞
    const nextGameState = { ...mockInitialGameState, turn: 2 };
    mockGameEngineInstance.getState
      .mockReturnValueOnce(mockInitialGameState) // –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ gameState
      .mockReturnValueOnce(mockInitialGameState) // –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ isGameRunning
      .mockReturnValueOnce(nextGameState);       // –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –≤ handleKeyDown

    render(<App />);
    // –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(screen.getByText('Turn: 1')).toBeInTheDocument();
    act(() => {
      fireEvent.keyDown(window, { key: 'w' });
    });

    // –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    expect(screen.getByText('Turn: 2')).toBeInTheDocument();
  });

  it('should start a new game when "Start New Game" button is clicked', () => {
    // –∏–º–∏—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "Game Over"
    mockGameEngineInstance.getState
      .mockReturnValueOnce({ ...mockInitialGameState, gameOver: true }) // –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ gameState
      .mockReturnValueOnce({ ...mockInitialGameState, gameOver: true }); // –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ isGameRunning (—á—Ç–æ–±—ã isGameRunning —Å—Ç–∞–ª–æ false)
    render(<App />);

    // –∫–Ω–æ–ø–∫–∞ "Start New Game" –≤–∏–¥–Ω–∞
    const startButton = screen.getByRole('button', { name: /start new game/i });
    expect(startButton).toBeInTheDocument();

    // –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º GameEngine –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    (GameEngine as jest.Mock).mockClear(); // –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–∑–æ–≤–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ GameEngine
    mockGameEngineInstance.getState.mockReturnValueOnce(mockInitialGameState); // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

    act(() => {
      fireEvent.click(startButton);
    });

    // GameEngine –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å–Ω–æ–≤–∞ (–¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã)
    expect(GameEngine).toHaveBeenCalledTimes(1);
    expect(GameEngine).toHaveBeenCalledWith(mockInitialGameState.theme);
    // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å–±—Ä–æ—Å–∏–ª–æ—Å—å –∏ isGameRunning = true
    expect(screen.getByText('Turn: 1')).toBeInTheDocument();
  });

  it('should switch theme and start new game when "Switch Theme" button is clicked', () => {
    render(<App />);
    
    const switchThemeButton = screen.getByRole('button', { name: /switch to forest theme/i });
    expect(switchThemeButton).toBeInTheDocument();

    // –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º GameEngine –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å –Ω–æ–≤–æ–π —Ç–µ–º–æ–π
    (GameEngine as jest.Mock).mockClear(); //–æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–∑–æ–≤–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ GameEngine
    const newTheme = GameTheme.FOREST;
    mockGameEngineInstance.getState.mockReturnValueOnce({ ...mockInitialGameState, theme: newTheme });

    act(() => {
      fireEvent.click(switchThemeButton);
    });

    // GameEngine –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –Ω–æ–≤–æ–π —Ç–µ–º–æ–π
    expect(GameEngine).toHaveBeenCalledTimes(1);
    expect(GameEngine).toHaveBeenCalledWith(newTheme);
    // –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É
    expect(screen.getByText(`Theme: ${newTheme}`)).toBeInTheDocument();
  });

  it('should not process commands if game is not running', () => {
    mockGameEngineInstance.getState.mockReturnValue({ ...mockInitialGameState, gameOver: true });
    render(<App />);
		const mockCommandInvoker = (CommandInvoker as jest.Mock).mock.results[0].value;
    act(() => {
      fireEvent.keyDown(window, { key: 'w' });
    });
    expect(mockCommandInvoker.addCommand).not.toHaveBeenCalled();
    expect(mockCommandInvoker.executeCommands).not.toHaveBeenCalled();
  });
});