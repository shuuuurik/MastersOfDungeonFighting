import { NormalState } from '../../../patterns/state/NormalState';
import { PanicState } from '../../../patterns/state/PanicState';
import { PatrolState } from '../../../patterns/state/PatrolState';
import { TrackingState } from '../../../patterns/state/TrackingState';
import { BehaviorStrategy } from '../../../patterns/strategy/BehaviorStrategy';
import { AggressiveBehavior } from '../../../patterns/strategy/AggressiveBehavior';
import { FearfulBehavior } from '../../../patterns/strategy/FearfulBehavior';
import { Entity, GameField, Position, EntityType, TileType } from '../../../types/game';

describe('Enemy States (State Pattern)', () => {
    let mockEntity: Entity;
    let mockPlayer: Entity;
    let mockGameField: GameField;
    let mockOriginalStrategy: BehaviorStrategy;

    beforeEach(() => {
        jest.clearAllMocks();
        jest.spyOn(Math, 'random').mockReturnValue(0.5); // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π Math.random –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏

        mockEntity = {
            id: 'enemy-1',
            type: EntityType.ENEMY,
            name: 'Test Enemy',
            position: { x: 5, y: 5 },
            stats: {
                health: 100,
                maxHealth: 100,
                attack: 10,
                defense: 5,
                experience: 0,
                level: 1,
                experienceToNextLevel: 0,
            },
            symbol: 'E',
        };

        mockPlayer = {
            id: 'player',
            type: EntityType.PLAYER,
            name: 'Player',
            position: { x: 0, y: 0 },
            stats: {
                health: 100,
                maxHealth: 100,
                attack: 10,
                defense: 5,
                experience: 0,
                level: 1,
                experienceToNextLevel: 0,
            },
            symbol: 'ü§°',
        };

        mockGameField = {
            width: 10,
            height: 10,
            position: { x: 0, y: 0 },
            tiles: Array(10).fill(null).map((_, y) =>
                Array(10).fill(null).map((__, x) => ({
                    type: TileType.FIELD,
                    position: { x, y },
                    entity: null,
                }))
            ),
        };
        // –Ω–∞ –ø–æ–ª–µ –µ—Å—Ç—å –º–æ–∫-—Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        mockGameField.tiles[mockEntity.position.y][mockEntity.position.x].entity = mockEntity;
        mockGameField.tiles[mockPlayer.position.y][mockPlayer.position.x].entity = mockPlayer;

        // –º–æ–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        mockOriginalStrategy = {
            execute: jest.fn((entity: Entity, _: Entity, __: GameField) => {
                // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
                return { ...entity.position };
            }),
        };
    });

    afterEach(() => {
        jest.restoreAllMocks();
    });

    // --- NormalState Tests ---
    describe('NormalState', () => {
        let normalState: NormalState;

        beforeEach(() => {
            normalState = new NormalState();
        });

        it('should use the original strategy for getNextPosition', () => {
            const expectedPosition = { x: 6, y: 5 };
            (mockOriginalStrategy.execute as jest.Mock).mockReturnValue(expectedPosition);

            const nextPosition = normalState.getNextPosition(mockEntity, mockPlayer, mockGameField, mockOriginalStrategy);

            expect(mockOriginalStrategy.execute).toHaveBeenCalledWith(mockEntity, mockPlayer, mockGameField);
            expect(nextPosition).toEqual(expectedPosition);
            expect(normalState.getName()).toBe('Normal');
        });

        it('should transition to PanicState if health drops below threshold', () => {
            mockEntity.stats.health = mockEntity.stats.maxHealth * 0.2; // 20% –∑–¥–æ—Ä–æ–≤—å—è

            const nextState = normalState.shouldTransition(mockEntity);

            expect(nextState).toBeInstanceOf(PanicState);
        });

        it('should not transition if health is above threshold', () => {
            mockEntity.stats.health = mockEntity.stats.maxHealth * 0.4; // 40% –∑–¥–æ—Ä–æ–≤—å—è

            const nextState = normalState.shouldTransition(mockEntity);

            expect(nextState).toBeNull();
        });

        it('should return "Normal" for getName', () => {
            expect(normalState.getName()).toBe('Normal');
        });
    });

    // --- PanicState Tests ---
    describe('PanicState', () => {
        let panicState: PanicState;
        let mockFearfulStrategyExecute: jest.Mock;

        beforeEach(() => {
            // –º–æ–∫–∞–µ–º FearfulBehavior.execute, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            mockFearfulStrategyExecute = jest.fn((entity: Entity, _: Entity, __: GameField) => {
                // —Å–∫–∞–∂–µ–º, —á—Ç–æ fearfulStrategy –≤—Å–µ–≥–¥–∞ –æ—Ç—Å—Ç—É–ø–∞–µ—Ç –Ω–∞ 1 –ø–æ X
                return { x: entity.position.x - 1, y: entity.position.y };
            });
            // –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä FearfulBehavior, —á—Ç–æ–±—ã –ø–æ–¥–º–µ–Ω–∏—Ç—å –µ–≥–æ execute
            jest.spyOn(FearfulBehavior.prototype, 'execute').mockImplementation(mockFearfulStrategyExecute);

            panicState = new PanicState();
        });

        it('should use FearfulBehavior for getNextPosition, ignoring original strategy', () => {
            const nextPosition = panicState.getNextPosition(mockEntity, mockPlayer, mockGameField, mockOriginalStrategy);

            // FearfulBehavior.execute –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω, –∞ –Ω–µ mockOriginalStrategy
            expect(FearfulBehavior.prototype.execute).toHaveBeenCalledWith(mockEntity, mockPlayer, mockGameField);
            expect(mockOriginalStrategy.execute).not.toHaveBeenCalled();
            expect(nextPosition).toEqual({ x: mockEntity.position.x - 1, y: mockEntity.position.y });
            expect(panicState.getName()).toBe('Panic');
        });

        it('should transition to NormalState if health recovers above threshold', () => {
            mockEntity.stats.health = mockEntity.stats.maxHealth * 0.6; // 60% –∑–¥–æ—Ä–æ–≤—å—è

            const nextState = panicState.shouldTransition(mockEntity);

            expect(nextState).toBeInstanceOf(NormalState);
        });

        it('should not transition if health is still below recovery threshold', () => {
            mockEntity.stats.health = mockEntity.stats.maxHealth * 0.4; // 40% –∑–¥–æ—Ä–æ–≤—å—è

            const nextState = panicState.shouldTransition(mockEntity);

            expect(nextState).toBeNull();
        });

        it('should return "Panic" for getName', () => {
            expect(panicState.getName()).toBe('Panic');
        });
    });

    // --- PatrolState Tests ---
    describe('PatrolState', () => {
        let patrolState: PatrolState;
        const patrolCenter: Position = { x: 5, y: 5 };
        const patrolRadius: number = 2; // —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤

        beforeEach(() => {
            // –º–æ–∫–∞–µ–º Math.random –¥–ª—è generatePatrolPoints
            jest.spyOn(Math, 'random').mockReturnValueOnce(0); // –≤—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π patrolPoint (x + radius)

            patrolState = new PatrolState(patrolCenter, patrolRadius);
            // —Å–±—Ä–æ—Å–∏–º Math.random, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –≤–ª–∏—è–ª –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ getNextPosition
            jest.spyOn(Math, 'random').mockReturnValue(0.5); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤
        });

        it('should transition to PanicState if health drops below threshold', () => {
            mockEntity.stats.health = mockEntity.stats.maxHealth * 0.2; // 20% –∑–¥–æ—Ä–æ–≤—å—è

            const nextState = patrolState.shouldTransition(mockEntity);

            expect(nextState).toBeInstanceOf(PanicState);
        });

        it('should not transition if health is above threshold', () => {
            mockEntity.stats.health = mockEntity.stats.maxHealth * 0.4; // 40% –∑–¥–æ—Ä–æ–≤—å—è

            const nextState = patrolState.shouldTransition(mockEntity);

            expect(nextState).toBeNull();
        });

        it('should return "Patrol" for getName', () => {
            expect(patrolState.getName()).toBe('Patrol');
        });
    });

    // --- TrackingState Tests ---
    describe('TrackingState', () => {
        let trackingState: TrackingState;
        const targetPosition: Position = { x: 8, y: 8 };
        const giveUpDistance: number = 3; // —É–º–µ–Ω—å—à–∏–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤
        let mockAggressiveStrategyExecute: jest.Mock;

        beforeEach(() => {
            // –º–æ–∫–∞–µ–º AggressiveBehavior.execute
            mockAggressiveStrategyExecute = jest.fn((entity: Entity, target: Entity, _: GameField) => {
                // –¥–ª—è —Ç–µ—Å—Ç–∞, –ø—É—Å—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –¥–≤–∏–≥–∞–µ—Ç—Å—è –∫ —Ü–µ–ª–∏ –ø–æ x, –ø–æ—Ç–æ–º –ø–æ y
                if (entity.position.x < target.position.x) return { x: entity.position.x + 1, y: entity.position.y };
                if (entity.position.x > target.position.x) return { x: entity.position.x - 1, y: entity.position.y };
                if (entity.position.y < target.position.y) return { x: entity.position.x, y: entity.position.y + 1 };
                if (entity.position.y > target.position.y) return { x: entity.position.x, y: entity.position.y - 1 };
                return { ...entity.position }; // –µ—Å–ª–∏ —É–∂–µ –Ω–∞ —Ü–µ–ª–∏
            });
            jest.spyOn(AggressiveBehavior.prototype, 'execute').mockImplementation(mockAggressiveStrategyExecute);

            trackingState = new TrackingState(targetPosition, giveUpDistance);
        });

        afterEach(() => {
            jest.restoreAllMocks();
        });

        it('should use AggressiveBehavior to move towards target position', () => {
            mockEntity.position = { x: 5, y: 5 };
            const nextPosition = trackingState.getNextPosition(mockEntity, mockPlayer, mockGameField, mockOriginalStrategy);

            expect(AggressiveBehavior.prototype.execute).toHaveBeenCalled();
            expect(nextPosition).toEqual({ x: 6, y: 5 }); // –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –Ω–∞ 1 –≤–ø—Ä–∞–≤–æ –∫ {8,8}
            expect(trackingState.getName()).toBe('Tracking');
        });

        it('should transition to NormalState if distance to target exceeds giveUpDistance', () => {
            mockEntity.position = { x: 0, y: 0 }; // –æ—á–µ–Ω—å –¥–∞–ª–µ–∫–æ –æ—Ç targetPosition (8,8)

            const nextState = trackingState.shouldTransition(mockEntity);

            expect(nextState).toBeInstanceOf(NormalState);
        });

        it('should transition to PatrolState if entity reaches target position', () => {
            mockEntity.position = { x: targetPosition.x, y: targetPosition.y };

            const nextState = trackingState.shouldTransition(mockEntity);

            expect(nextState).toBeInstanceOf(PatrolState);
        });

        it('should not transition if within tracking range and not at target', () => {
            mockEntity.position = { x: 7, y: 7 }; // –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 3 –æ—Ç (8,8)
            
            const nextState = trackingState.shouldTransition(mockEntity);

            expect(nextState).toBeNull();
        });

        it('should return "Tracking" for getName', () => {
            expect(trackingState.getName()).toBe('Tracking');
        });
    });
});