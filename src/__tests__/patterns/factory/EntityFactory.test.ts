import { EntityFactory } from '../../../patterns/factory/EntityFactory';
import { FantasyEntityFactory } from '../../../patterns/factory/FantasyEntityFactory';
import { ForestEntityFactory } from '../../../patterns/factory/ForestEntityFactory';
import { Position, EntityType, } from '../../../types/game';

describe('EntityFactory (Abstract Factory Pattern)', () => {
    let fantasyFactory: EntityFactory;
    let forestFactory: EntityFactory;
    const testPosition: Position = { x: 5, y: 5 };
    const testLevel: number = 5;

    beforeEach(() => {
        // –º–æ–∫–∞–µ–º Math.random, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
        // —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ 'types'.
        jest.spyOn(Math, 'random').mockReturnValue(0);
        
        fantasyFactory = new FantasyEntityFactory();
        forestFactory = new ForestEntityFactory();
    });

    afterEach(() => {
        jest.restoreAllMocks();
    });

    // --- –¢–µ—Å—Ç—ã –¥–ª—è FantasyEntityFactory ---
    describe('FantasyEntityFactory', () => {
        it('should create a melee entity with correct basic properties', () => {
            const entity = fantasyFactory.createMelee(testPosition, testLevel);

            expect(entity).toBeDefined();
            expect(entity.id).toBeDefined(); // UUID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
            expect(typeof entity.id).toBe('string');
            expect(entity.type).toBe(EntityType.ENEMY);
            expect(entity.position).toEqual(testPosition);
            expect(entity.name).toBe('Goblin Warrior');
            expect(entity.symbol).toBe('üë∫');
            expect(entity.stats).toBeDefined();
            expect(entity.stats.level).toBe(testLevel);
        });

        it('should create a ranged entity with correct basic properties', () => {
            const entity = fantasyFactory.createRanged(testPosition, testLevel);
            expect(entity).toBeDefined();
            expect(entity.id).toBeDefined();
            expect(entity.type).toBe(EntityType.ENEMY);
            expect(entity.position).toEqual(testPosition);
            expect(entity.name).toBe('Goblin Archer');
            expect(entity.symbol).toBe('üèπ');
            expect(entity.stats.level).toBe(testLevel);
        });

        it('should create an elite entity with correct basic properties', () => {
            const entity = fantasyFactory.createElite(testPosition, testLevel);
            expect(entity).toBeDefined();
            expect(entity.id).toBeDefined();
            expect(entity.type).toBe(EntityType.ENEMY);
            expect(entity.position).toEqual(testPosition);
            expect(entity.name).toBe('Dragon');
            expect(entity.symbol).toBe('üêâ');
            expect(entity.stats.level).toBe(testLevel);
        });

        it('should create a replicating entity with correct basic properties', () => {
            const entity = fantasyFactory.createReplicating(testPosition, testLevel);
            expect(entity).toBeDefined();
            expect(entity.id).toBeDefined();
            expect(entity.type).toBe(EntityType.ENEMY);
            expect(entity.position).toEqual(testPosition);
            expect(entity.name).toBe('Slime');
            expect(entity.symbol).toBe('üü¢');
            expect(entity.stats.level).toBe(testLevel);
        });
    });

    // --- –¢–µ—Å—Ç—ã –¥–ª—è ForestEntityFactory ---
    describe('ForestEntityFactory', () => {
        it('should create a melee entity with correct basic properties and different theme', () => {
            const entity = forestFactory.createMelee(testPosition, testLevel);

            expect(entity).toBeDefined();
            expect(entity.id).toBeDefined();
            expect(entity.type).toBe(EntityType.ENEMY);
            expect(entity.position).toEqual(testPosition);
            expect(entity.name).toBe('Boar');
            expect(entity.symbol).toBe('üêó');
            expect(entity.stats).toBeDefined();
            expect(entity.stats.level).toBe(testLevel);
        });

        it('should create a ranged entity with correct basic properties and different theme', () => {
            const entity = forestFactory.createRanged(testPosition, testLevel);
            expect(entity).toBeDefined();
            expect(entity.name).toBe('Archer');
            expect(entity.symbol).toBe('üèπ');
        });

        it('should create an elite entity with correct basic properties and different theme', () => {
            const entity = forestFactory.createElite(testPosition, testLevel);
            expect(entity).toBeDefined();
            expect(entity.name).toBe('Polar Bear');
            expect(entity.symbol).toBe('üêª‚Äç‚ùÑÔ∏è');
        });

        it('should create a replicating entity with correct basic properties and different theme', () => {
            const entity = forestFactory.createReplicating(testPosition, testLevel);
            expect(entity).toBeDefined();
            expect(entity.name).toBe('Rat');
            expect(entity.symbol).toBe('üêÄ');
        });
    });

    // --- –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–±—Ä–∏–∫ ---
    it('should create different entities from different factories for the same type', () => {
        const fantasyMelee = fantasyFactory.createMelee(testPosition);
        const forestMelee = forestFactory.createMelee(testPosition);

        // ID —Ä–∞–∑–Ω—ã–µ
        expect(fantasyMelee.id).not.toBe(forestMelee.id);

        // –∏–º–µ–Ω–∞/—Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–Ω—ã–µ
        expect(fantasyMelee.name).not.toBe(forestMelee.name);
        expect(fantasyMelee.symbol).not.toBe(forestMelee.symbol);
    });
});