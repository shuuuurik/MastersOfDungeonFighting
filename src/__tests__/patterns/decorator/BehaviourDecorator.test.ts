import { Entity, GameField, Tile, TileType, EntityType } from '../../../types/game';
import { AggressiveBehavior } from '../../../patterns/strategy/AggressiveBehavior';
import { ConfusedBehavior } from '../../../patterns/strategy/ConfusedBehavior';

// –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è GameField
const createMockGameField = (width: number, height: number): GameField => {
    const tiles: Tile[][] = Array(height).fill(null).map((_, y) =>
        Array(width).fill(null).map((__, x) => ({
            position: { x, y },
            type: TileType.FIELD,
            entity: null,
        }))
    );
    return {
        width,
        height,
        tiles,
        position: { x: 0, y: 0 },
    };
};

describe('Behavior Strategies', () => {
    let mockPlayer: Entity;
    let mockEnemy: Entity;
    let mockGameField: GameField;

    beforeEach(() => {
        mockPlayer = {
            id: 'player',
            type: EntityType.PLAYER,
            name: 'Player',
            position: { x: 5, y: 5 },
            stats: { health: 100, maxHealth: 100, attack: 10, defense: 5, experience: 0, level: 1, experienceToNextLevel: 100 },
            symbol: 'ü§°',
        };
        mockEnemy = {
            id: 'enemy-1',
            type: EntityType.ENEMY,
            name: 'Test Enemy',
            position: { x: 0, y: 0 },
            stats: { health: 50, maxHealth: 50, attack: 5, defense: 2, experience: 0, level: 1, experienceToNextLevel: 0 },
            symbol: 'E',
            experience: 10
        };
        mockGameField = createMockGameField(10, 10);

        mockGameField.tiles[mockPlayer.position.y][mockPlayer.position.x].entity = mockPlayer;
        mockGameField.tiles[mockEnemy.position.y][mockEnemy.position.x].entity = mockEnemy;

        // –º–æ–∫ Math.random –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ConfusedBehavior (–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)
        jest.spyOn(Math, 'random').mockReturnValue(0.5);
    });

    afterEach(() => {
        jest.restoreAllMocks(); // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Math.random –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    });

    // –∫–æ–Ω—Ñ—É–∑–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω "–î–µ–∫–æ—Ä–∞—Ç–æ—Ä" (ConfusedBehavior –∫–∞–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
    it('ConfusedBehavior should return a random adjacent valid position when confused', () => {
        const baseBehavior = new AggressiveBehavior();
        const confusedBehavior = new ConfusedBehavior(baseBehavior, 3); // –Ω–∞ 3 —Ö–æ–¥–∞

        mockEnemy.position = { x: 5, y: 5 };
        mockPlayer.position = { x: 5, y: 6 }; // –∏–≥—Ä–æ–∫ —Å–Ω–∏–∑—É

        // –∏–∑–º–µ–Ω—è–µ–º –º–æ–∫ Math.random, —á—Ç–æ–±—ã –æ–Ω –≤—ã–±–∏—Ä–∞–ª –Ω—É–∂–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–∏–Ω–¥–µ–∫—Å 2 –¥–ª—è { x, y: y+1 })
        jest.spyOn(Math, 'random').mockReturnValue(0.25); // 0.25 * 8 = 2

        const nextPosition = confusedBehavior.execute(mockEnemy, mockPlayer, mockGameField);
        // –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è { x: 5, y: 6 }
        expect(nextPosition).toEqual({ x: 4, y: 4 });
        // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ö–æ–¥–æ–≤ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å
        expect(confusedBehavior.getTurnsRemaining()).toBe(2);
    });

    it('ConfusedBehavior should revert to wrapped behavior after confusion ends', () => {
        const baseBehavior = new AggressiveBehavior();
        const confusedBehavior = new ConfusedBehavior(baseBehavior, 1); // –Ω–∞ 1 —Ö–æ–¥

        mockEnemy.position = { x: 1, y: 1 };
        mockPlayer.position = { x: 3, y: 1 }; // –∏–≥—Ä–æ–∫ —Å–ø—Ä–∞–≤–∞

        // –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: –≤—Ä–∞–≥ –∑–∞–ø—É—Ç–∞–µ—Ç—Å—è (—Å–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
        confusedBehavior.execute(mockEnemy, mockPlayer, mockGameField);
        expect(confusedBehavior.getTurnsRemaining()).toBe(0); // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å –¥–æ 0

        // –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: —Ç–µ–ø–µ—Ä—å confusedBehavior –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å wrappedBehavior (AggressiveBehavior)
        const nextPositionAfterConfusion = confusedBehavior.execute(mockEnemy, mockPlayer, mockGameField);
        // –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ –∏–≥—Ä–æ–∫—É
        expect(nextPositionAfterConfusion).toEqual({ x: 2, y: 1 }); // –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É
    });
});